1. how to implement set now?
--------------------------------------
Cf: set/set.rb

1b. would i use my own, why or why not? 
--------------------------------------
- If i actually had to implement a data structure for production use (which seems like a bad idea unless I was working on creating a new programming language that would change the world), maybe I would use my own version (not as currently implemented). 
- There are several limitations for the current implementation. 
  - It is not as efficient -- Ruby uses C under the hood to do all of this (https://github.com/ruby/ruby/blob/1b5acebef2d447a3dbed6cf5e146fda74b81f10d/st.c) and I believe that's faster. 
  - Hash function is not robust, and currently is not type agnostic. Ruby has a hash function in the Object class, which is the base class for all classes in Ruby, and that, in C, calculates the hash code by grabbing the internal memory address of that value and passing that through the Murmur algorithm to scramble the bits
 - Following the 2nd point, I currently have limitations on what types can be inserted as a key. If i had a "type-agnostic" hash function, I could do what ruby does: 
 ` {{key => 1} => 'dog'}

2. array size - dynamic v.s. not
--------------------------------------
Cf. hashtables/hashtablefixedlength.rb


2b. ramifications of an optional initial size specification
--------------------------------------
- current implementation of hashtable needs to be edited to be something like hashtablefixedlength.rb
- would save more space if the user estimated their size correctly, but if they didn't it's possible that re-hashing the table needs to occur more frequently than in a scenario where the hashtable size is set by the system. Ruby's hashtables all initiaze as a single length array in the beginning. They redesigned it this way after seeing that most users have hashtables of length 6. It's increased in size and rehashed only after the user hits the +6 point. 
- design choice: automatically resize once the load factor is high without informing the user? or alert the user that they are reaching their size limit for efficiency and have them manually fix it? Not sure what would be more useful. i.e, how much control should be given to the user on something that's been abstracted and hidden away in most scenarios?  
